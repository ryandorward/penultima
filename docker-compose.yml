version: '3.7'

services:
  ultima-backend:  
    container_name: ultima-backend
    image: ultima-backend
    build: 
      context: ./backend
      dockerfile: ./Dockerfile
    #ports:
    #  - "49160:8080"
    expose:
      - "8080"
    restart: always        
    volumes:
      - ./backend/src:/usr/src/app/src
    environment:
      - SERVER_PORT=8080  
    networks:
      - local
      - default
    hostname: ultima-backend  
  #ultima-frontend: 
  #  restart: always
  #  container_name: ultima-frontend
  #  image: ultima-frontend
  #  build: 
  #    context: ./frontend
  #    dockerfile: ./Dockerfile   
  #  ports:
  #    - "3001:80"
  #  volumes:     
  #    - ./frontend/src:/app/src
  #    - ./frontend:/app/moo
  #  environment:
  #    - CHOKIDAR_USEPOLLING=true
  #    - SERVER_PORT=80
  #  links:
  #    - ultima-backend
  #  depends_on:
  #    - ultima-backend
  #  networks:
  #    - local
  #    - default
  ultima-client:  
     container_name: ultima-client
     image: ultima-client
     build: 
       context: ./client
       dockerfile: ./Dockerfile
     ports:
       - "3002:3000"           
     volumes:     
       - ./client/src:/app/src
       - ./client/public:/app/public
       - ./client/src:/app/build
     environment:
       - CHOKIDAR_USEPOLLING=true
       - SERVER_PORT=3000
     links:
       - ultima-backend
     depends_on:
       - ultima-backend       
     networks:
       - local
       - default
  reverseproxy:
    restart: always
    build: ./reverseProxy
    image: "reverseproxy:1.0.0"
    networks:
      - local
      - default
    ports:
      - "180:80" 
    depends_on:
      - ultima-backend
    #  - ultima-frontend
      - ultima-client
  #go-api-production:
  #  hostname: go-api-production
  #  restart: unless-stopped
  #  build:
  #    context: ./go-api
  #    dockerfile: Dockerfile
  #    target: base
  #  environment:
  #    PORT: "8081"
  #  volumes:
  #    - type: bind
  #      source: ./go-api
  #      target: /home/app
  #  working_dir: /home/app
  #  ports:
  #    - "8082:8081" 
  #  networks:
  #     - local
  #  command: bash -c "./scripts/production.sh"
  #go-api-development:
  #  hostname: go-api-development
  #  restart: unless-stopped
  #  build:
  #    context: ./go-api
  #    dockerfile: Dockerfile
  #    target: dev
  #  volumes:
  #    - type: bind
  #      source: ./go-api
  #      target: /home/app
  #  working_dir: /home/app
  #  ports:
  #    - "8083:8080" 
  #  networks:  
  #     - local
  #  command: bash -c "go mod download && make serve"
  server-development:
    hostname: server-development
    restart: unless-stopped
    build:
      context: ./server
      dockerfile: Dockerfile
      target: dev
    volumes:
      - type: bind
        source: ./server
        target: /home/app
    working_dir: /home/app
    ports:
      - "8084:8085" 
    networks:
      - local
    command: bash -c "go mod download && make serve"
  db:   
    image: postgres
    restart: always      
    volumes:
      - data:/var/lib/postgresql/data  
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql 
    environment:
      - POSTGRES_USER=moohead
      - POSTGRES_PASSWORD=5f*79SrR6)%_G
      - POSTGRES_DB=penultima 
      #- POSTGRES_USER=${DB_USER}
      #- POSTGRES_PASSWORD=${DB_PASSWORD}
      #- POSTGRES_DB=${DB_NAME}
      #- DATABASE_HOST=${DB_HOST}   
    ports:
      - 5432:5432  
    networks:
      - local
networks:
    local:
      driver: bridge
volumes: 
  data:         